# Generated by Django 5.0.2 on 2024-03-12 13:44
import os

from django.db import migrations
from django.db.models import Value
from django.contrib.postgres.search import SearchVector


MIGRATION_LIMIT = os.getenv("ISSUE_EVENT_MIGRATION_LIMIT", 10000)


def migrate_issue_events(apps, schema_editor):
    OldIssue = apps.get_model("issues", "Issue")
    Event = apps.get_model("events", "Event")
    Issue = apps.get_model("issue_events", "Issue")
    IssueEvent = apps.get_model("issue_events", "IssueEvent")

    oldest_event = Event.objects.order_by("-created")[
        MIGRATION_LIMIT : MIGRATION_LIMIT + 1
    ].values("created")
    start_migration_date = oldest_event.created if oldest_event else None

    old_issues = OldIssue.objects.all().defer("search_vector", "tags")
    if start_migration_date:
        old_issues = old_issues.filter(created__gt=start_migration_date)

    for old_issue in old_issues:
        issue = Issue.objects.create(
            culprit=old_issue.culprit,
            level=old_issue.level,
            metadata=old_issue.metadata,
            project=old_issue.project,
            title=old_issue.title,
            type=old_issue.type,
            status=old_issue.status,
            short_id=old_issue.short_id,
            search_vector=SearchVector(Value(old_issue.title)),
            count=old_issue.count,
            last_seen=old_issue.last_seen,
        )
        events = old_issue.event_set.order_by("-created")
        if start_migration_date:
            events = events.filter(created__gt=start_migration_date)
        IssueEvent.objects.bulk_create(
            [
                IssueEvent(
                    id=event.event_id,
                    type=event.data.get("type", 0),
                    timestamp=event.timestamp if event.timestamp else event.created,
                    received=event.created,
                    title=event.data.get("title"),
                    transaction=event.data.get("culprit"),
                    level=event.level,
                    data=event.data,
                    tags=event.tags,
                    issue=issue,
                )
                for event in events
            ]
        )


class Migration(migrations.Migration):
    dependencies = [
        ("events", "0001_squashed_0003_auto_20210219_1951"),
    ]

    operations = [
        migrations.RunPython(migrate_issue_events),
    ]
